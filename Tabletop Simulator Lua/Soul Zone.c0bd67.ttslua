-- Written by Ediforce44
owner_color = "Blue"

ZONE_EDGES = {
    {x=0, z=0},       -- 1 = |""  ""| = 3
    {x=0, z=0},       -- 2 = |__  __| = 4
    {x=0, z=0},
    {x=0, z=0}
}

local INDEX_MAX = 4

attachedObjects = {}
indexTable = {}

BACK_SCALING = {0.225, 1, 0.078}

autoRewarding = true
rewardingButtonLocked = true
REWARDING_BUTTON_OFFSET = {x=-0.85, y=-0.4, z=-0.415}
REWARDING_BUTTON_COLOR = {
    ON  = Global.getTable("REAL_PLAYER_COLOR_RGB")[owner_color],
    OFF = {0, 0, 0}
}
REWARDING_BUTTON_TEXT = {
    ON = "Auto Rewarding:\n>>> ON <<<",
    OFF = "Auto Rewarding:\n>>> OFF <<<"
}

local function calculateZoneEdges()
    local scale = self.getScale()
    local xOffset = scale.x / 2
    local zOffset = scale.z / 2
    local position = self.getPosition()
    ZONE_EDGES[1] = {x = position.x - xOffset, z = position.z + zOffset}
    ZONE_EDGES[2] = {x = position.x - xOffset, z = position.z - zOffset}
    ZONE_EDGES[3] = {x = position.x + xOffset, z = position.z + zOffset}
    ZONE_EDGES[4] = {x = position.x + xOffset, z = position.z - zOffset}
end

local function getTimerParameters(blockedIndex)
    local timerParameters = {
        ["identifier"] = "SoulBlockedIndexTimer" .. self.guid .. tostring(blockedIndex),
        ["function_name"] = "resetBlockedIndex",
        ["parameters"] = {index = blockedIndex},
        ["delay"] = 2,
    }
    return timerParameters
end

function resetBlockedIndex(params)
    indexTable[params.index].tempBlocked = false
end

local function getTooltipStringRB()
    return "      Auto. Rewarding Button\n------------" .. (rewardingButtonLocked and " (Locked) " or "-----------")
            .. "------------\n\n - Right-Click: (Un-)lock Button\n - Left-Click: Switch mode\n"
end

local function attachObject(object)
    attachedObjects[object.getGUID()] = 1
end

local function detachObject(object)
    attachedObjects[object.getGUID()] = nil
end

local function insertIndexEntry(newEntry)
    local newIndex = #indexTable + 1
    for index , entry in pairs(indexTable) do
        if entry.position.z < newEntry.position.z then
            newIndex = index
            break
        end
    end
    table.insert(indexTable, newIndex, newEntry)
end

local function initIndexTable()
    indexTable = {}

    local position = {}
    for _ , snapPoint in pairs(Global.getSnapPoints()) do
        position = snapPoint.position
        if position.x > ZONE_EDGES[1].x and position.z < ZONE_EDGES[1].z then
            if position.x < ZONE_EDGES[4].x and position.z > ZONE_EDGES[4].z then
                insertIndexEntry({free = true, position = position, tempBlocked = false})
            end
        end
    end
end

local function resetIndexTable()
    for index = 1, INDEX_MAX do
        indexTable[index].free = true
    end
end

local function calculateIndexTable()
    resetIndexTable()
    local marginOffset = 0.7
    for _ , object in pairs(self.getObjects()) do
        if object.tag == "Card" or object.tag == "Deck" then
            local objectPosition = object.getPosition()
            for index = 1, INDEX_MAX do
                if math.abs(objectPosition.z - indexTable[index].position.z) < marginOffset then
                    indexTable[index].free = false
                end
            end
        end
    end
end

local function getRealPosition(indexPosition)
    if indexPosition == nil then
        return nil
    end
    return {x = indexPosition.x, y = 5, z = indexPosition.z}
end

local function getPositionFromIndex(index)
    return getRealPosition(indexTable[index].position)
end

local function getNextFreePosition()
    calculateIndexTable()
    for index = 1, INDEX_MAX do
        if indexTable[index].free and (not indexTable[index].tempBlocked) then
            indexTable[index].tempBlocked = true
            Timer.create(getTimerParameters(index))
            return getRealPosition(indexTable[index].position)
        end
    end
    return nil
end

local function placeObject(object, position)
    object.setRotationSmooth({0, 270, 0}, false)
    object.setPositionSmooth(position, false)
end

function onLoad(saved_data)
    calculateZoneEdges()
    initIndexTable()
    calculateIndexTable()

    local autoRewardingON = true

    if saved_data ~= "" and false then
        local loaded_data = JSON.decode(saved_data)
        if loaded_data[2] == false then
            autoRewardingON = loaded_data[2]
        end
        if loaded_data[3] == false then
            rewardingButtonLocked = loaded_data[3]
        end
        if loaded_data[1] then
            attachedObjects = loaded_data[1]
            goto skip
        end
    end
    for _ , obj in pairs(self.getObjects()) do
        if obj.tag == "Card" then
            attachObject(obj)
        end
    end

    ::skip::
    self.createButton({
        click_function = "click_function_SwitchRewardingMode",
        function_owner = self,
        label          = autoRewardingON and REWARDING_BUTTON_TEXT.ON or REWARDING_BUTTON_TEXT.OFF,
        position       = REWARDING_BUTTON_OFFSET,
        scale          = BACK_SCALING,
        width          = 1400,
        height         = 420,
        font_size      = 180,
        color          = autoRewardingON and REWARDING_BUTTON_COLOR.ON or REWARDING_BUTTON_COLOR.OFF,
        font_color     = {1, 1, 1},
        tooltip        = getTooltipStringRB()
    })
end

function onSave()
    return JSON.encode({attachedObjects, Global.getTable("automaticRewarding")[owner_color], rewardingButtonLocked})
end

function onObjectEnterZone(zone, enteringObject)
    if zone.getGUID() == self.guid then
        if enteringObject.tag == "Card" then
            attachObject(enteringObject)
        end
    end
end

function onObjectLeaveZone(zone, leavingObject)
    if zone.getGUID() == self.guid then
        if leavingObject.tag == "Card" then
            detachObject(leavingObject)
        end
    end
end

function click_function_SwitchRewardingMode(_, color, alt_click)
    if Global.call("isPlayerAuthorized", {playerColor = color, ownerColor = owner_color}) then
        -- Locks and unlocks rewarding button
        if alt_click then
            rewardingButtonLocked = not rewardingButtonLocked
            self.editButton({index = 0, tooltip = getTooltipStringRB()})
            return
        elseif rewardingButtonLocked then
            return
        end

        Global.call("switchRewardingMode", {playerColor = owner_color})
    end
end

-- Called by the global function switchRewardingMode()
function onSwitchingRewardingMode(params)
    if params.newState == nil then
        Global.call("printWarning", {text = "Wrong parameters in 'soul zone' function 'onSwitchingRewardingMode()'."})
    end

    local msg = "Your Auto Rewarding has been "
    if params.newState then
        self.editButton({index = 0, label = REWARDING_BUTTON_TEXT.ON, color = REWARDING_BUTTON_COLOR.ON})
        msg = msg .. "turned ON !!!"
    else
        self.editButton({index = 0, label = REWARDING_BUTTON_TEXT.OFF, color = REWARDING_BUTTON_COLOR.OFF})
        msg = msg .."turned OFF !!!"
    end
    print(Global.getTable("REAL_PLAYER_COLOR")[owner_color] .. owner_color
            .. "s[-] auto rewarding mode has changed.")
    if Player[owner_color].seated then
        broadcastToColor(msg, owner_color)
    end
end

function placeObjectInZone(params)
    if params.object == nil then
        Global.call("printWarning", {text = "Wrong parameters in player zone function 'placeCardInPlayerZone()'."})
        return
    end
    local position = nil
    if params.index ~= nil and params.index <= INDEX_MAX then
        position = getPositionFromIndex(params.index)
    else
        position = getNextFreePosition()
    end
    if position ~= nil then
        Wait.frames(function ()
                local rewards = params.object.getTable("rewards")
                if rewards then
                    local soulAmount = "Souls"
                    if rewards.SOULS == 0 then
                        soulAmount = "no Soul"
                    elseif rewards.SOULS == 1 then
                        soulAmount = "1 Soul"
                    elseif rewards.SOULS > 1 then
                        soulAmount = tostring(rewards.SOULS) .. " Souls"
                    else
                        return
                    end
                    broadcastToAll(Global.call("getPlayerString", {playerColor = owner_color}) .. " earned "
                        .. Global.getTable("PRINT_COLOR_SPECIAL").SOUL .. soulAmount .. "[-]. Hurray !!!")
                end
            end)
        placeObject(params.object, position)
    else
        local handInfo = Global.getTable("HAND_INFO")[owner_color]
        params.object.deal(1, handInfo.owner, handInfo.index)
    end
end