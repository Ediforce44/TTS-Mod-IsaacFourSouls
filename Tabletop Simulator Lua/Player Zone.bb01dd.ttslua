-- Written by Ediforce44
owner_color = "Yellow"

ZONE_EDGES = {
    {x=0, z=0},       -- 1 = |""  ""| = 3
    {x=0, z=0},       -- 2 = |__  __| = 4
    {x=0, z=0},
    {x=0, z=0}
}

INDEX_MAX = 14
ROW_MAX = 2
INDICES_PER_ROW = INDEX_MAX / ROW_MAX

playerAlive = true
attachedObjects = {}
indexTable = {}

local function calculateZoneEdges()
    local scale = self.getScale()
    local xOffset = scale.x / 2
    local zOffset = scale.z / 2
    local position = self.getPosition()
    ZONE_EDGES[1] = {x = position.x + xOffset, z = position.z - zOffset}
    ZONE_EDGES[2] = {x = position.x + xOffset, z = position.z + zOffset}
    ZONE_EDGES[3] = {x = position.x - xOffset, z = position.z - zOffset}
    ZONE_EDGES[4] = {x = position.x - xOffset, z = position.z + zOffset}
end

local function getTimerParameters(blockedIndex)
    local timerParameters = {
        ["identifier"] = "PlayerBlockedIndexTimer" .. self.guid .. tostring(blockedIndex),
        ["function_name"] = "resetBlockedIndex",
        ["parameters"] = {index = blockedIndex},
        ["delay"] = 2,
    }
    return timerParameters
end

local function getRowFromIndex(index)
    return math.floor(index/(INDICES_PER_ROW + 1)) + 1
end

local function getColumnFromIndex(index)
    --Start counting at 1 is shit
    local theoryColumn = index % INDICES_PER_ROW
    if theoryColumn == 0 then
        return INDICES_PER_ROW
    end
    return theoryColumn
end

function resetBlockedIndex(params)
    local row = getRowFromIndex(params.index)
    local column = getColumnFromIndex(params.index)
    indexTable[row][column].tempBlocked = false
end

local function payDeathPenalty()
    --TODO
    return
end

local function attachObject(object)
    attachedObjects[object.getGUID()] = 1     --Insert item attributes like "active", "loot", "happen", "ethernal", etc.
end

local function detachObject(object)
    attachedObjects[object.getGUID()] = nil
end

local function getRowAndColumnFromPosition(position)
    local marginOffset = 0.7
    local row = 0
    for r = 1, ROW_MAX do
        if math.abs(position.z - indexTable[r][1].position.z) < marginOffset then
            row = r
            break
        end
    end
    if row > 0 then
        for c = 1, INDICES_PER_ROW do
            if math.abs(position.x - indexTable[row][c].position.x) < marginOffset then
                column = c
                break
            end
        end
    end
    return {row = row, column = column}
end

local function insertIndexEntry(newEntry)
    local ROW_WIDTH = math.abs(((ZONE_EDGES[2].z - ZONE_EDGES[1].z) / 2))
    local row = 0
    for r = 1, ROW_MAX do
        if newEntry.position.z > (ZONE_EDGES[2].z - (ROW_WIDTH * r)) then
            row = r
            break
        end
    end
    local newIndex = #indexTable[row] + 1
    for index , entry in pairs(indexTable[row]) do
        if entry.position.x < newEntry.position.x then
            newIndex = index
            break
        end
    end
    table.insert(indexTable[row], newIndex, newEntry)
end

local function initIndexTable()
    indexTable = {}
    for row = 1, ROW_MAX do
        table.insert(indexTable, {})
    end

    local position = {}
    for _ , snapPoint in pairs(Global.getSnapPoints()) do
        position = snapPoint.position
        if position.x < ZONE_EDGES[1].x and position.z > ZONE_EDGES[1].z then
            if position.x > ZONE_EDGES[4].x and position.z < ZONE_EDGES[4].z then
                insertIndexEntry({free = true, position = position:setAt('y', 5), tempBlocked = false})
            end
        end
    end
end

local function resetIndexTable()
    for row = 1, ROW_MAX do
        for column = 1, INDICES_PER_ROW do
            indexTable[row][column].free = true
        end
    end
end

local function calculateIndexTable()
    resetIndexTable()
    for _ , object in pairs(self.getObjects()) do
        if object.tag == "Card" or object.tag == "Deck" then
            local rowColumnTable= getRowAndColumnFromPosition(object.getPosition())
            indexTable[rowColumnTable.row][rowColumnTable.column].free = false
        end
    end
end

local function getPositionFromIndex(index)
    local row = getRowFromIndex(index)
    local column = getColumnFromIndex(index)
    if indexTable[row] == nil then
        return nil
    end
    return indexTable[row][column].position
end

local function getNextFreePosition(startingIndex)
    startingIndex = startingIndex or 1
    local startRow = getRowFromIndex(startingIndex)
    local startColumn = getColumnFromIndex(startingIndex)
    calculateIndexTable()
    for row = startRow, ROW_MAX do
        for column = startColumn, INDICES_PER_ROW do
            if indexTable[row][column].free and (not indexTable[row][column].tempBlocked) then
                indexTable[row][column].tempBlocked = true
                Timer.create(getTimerParameters((INDICES_PER_ROW * (row - 1)) + column))
                return indexTable[row][column].position
            end
        end
    end
    return nil
end

local function placeObject(object, position)
    object.setRotationSmooth({0, 0, 0}, false)
    object.setPositionSmooth(position, false)
end

function onLoad(saved_data)
    calculateZoneEdges()
    initIndexTable()
    calculateIndexTable()
    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        if loaded_data[1] then
            playerAlive = not (loaded_data[1] == false)      --Standard: true, only false if loaded_data[1] is false
        end
        if loaded_data[2] then
            attachedObjects = loaded_data[2]
            return
        end
    end
    for _ , obj in pairs(self.getObjects()) do
        if obj.tag == "Card" then
            attachObject(obj)
        end
    end
end

function onSave()
    return JSON.encode({playerAlive, attachedObjects})
end

function onObjectEnterZone(zone, enteringObject)
    if zone.getGUID() == self.guid then
        if enteringObject.tag == "Card" then
            attachObject(enteringObject)
        end
    end
end

function onObjectLeaveZone(zone, leavingObject)
    if zone.getGUID() == self.guid then
        if leavingObject.tag == "Card" then
            detachObject(leavingObject)
        end
    end
end

function deactivateCharacter()
    for _ , obj in pairs(self.getObjects()) do
        if obj.hasTag("Character") then
            obj.setRotationSmooth({0, 90, 0}, false)
        end
    end
end

function reanimatePlayer()
    playerAlive = true
end

function killPlayer()
    deactivateCharacter()
    payDeathPenalty()
    playerAlive = false
end

function getIndex(params)
    local position = nil
    if params.object == nil then
        if params.guid ~= nil then
            local object = getObjectFromGUID(params.guid)
            if object then
                position = object.getPosition()
            end
        else
            if params.position then
                position = params.position
            end
        end
    else
        position = params.object.getPosition()
    end
    if position == nil then
        Global.call("printWarning", {text = "Wrong parameters in player zone function 'getIndex()'."})
        return
    end

    local rowColumnTable = getRowAndColumnFromPosition(objPosition)
    return (rowColumnTable.row * INDICES_PER_ROW) + rowColumnTable.column
end

function placeObjectInZone(params)
    if params.object == nil then
        Global.call("printWarning", {text = "Wrong parameters in player zone function 'placeObjectInPlayerZone()'."})
        return
    end
    local position = nil
    if params.index ~= nil and params.index <= INDEX_MAX then
        if params.replacing then
            position = getPositionFromIndex(params.index)
        else
            position = getNextFreePosition(params.index)
        end
    else
        position = getNextFreePosition()
    end
    if position ~= nil then
        placeObject(params.object, position)
    elseif params.object.getQuantity() < 0 then
        params.object.deal(1, owner_color)
    end
end

-- More efficent for multi card placing
function placeMultipleObjectsInZone(params)
    if (params.objects == nil) or (#params.objects == 0) then
        Global.call("printWarning", {text = "Wrong parameters in player zone function 'placeMultipleObjectsInPlayerZone()'."})
        return
    end

    local startRow = 1
    local startColumn = 1
    if params.index ~= nil and params.index <= INDEX_MAX then
        startRow = getRowFromIndex(params.index)
        startColumn = getColumnFromIndex(params.index)
    end

    calculateIndexTable()
    local maxObjectIndex = #params.objects
    local nextObjectIndex = 1
    for row = startRow, ROW_MAX do
        for column = startColumn, INDICES_PER_ROW do
            if params.replacing or indexTable[row][column].free then
                placeObject(params.objects[nextObjectIndex], indexTable[row][column].position)
                nextObjectIndex = nextObjectIndex + 1
                if nextObjectIndex > maxObjectIndex then
                    return
                end
            end
        end
    end
    -- Not enough free fields for cards
    for index = nextObjectIndex , maxObjectIndex do
        if params.objects[index].getQuantity() < 0 then
            params.objects[index].deal(1, owner_color)
        end
    end
end