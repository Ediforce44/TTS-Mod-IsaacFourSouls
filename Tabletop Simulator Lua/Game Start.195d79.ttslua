CHARACTER_PLACER_GUID = "d2c68a"
FLOOR_CHANGE_GUID = "69a80d"

PLAYER_COLORS = {'Red', 'Blue', 'Yellow', 'Green'}

START_BUTTON_INDEX = 1

--- Edited by Ediforce44
ZONE_GUIDS_DECK = Global.getTable("ZONE_GUID_DECK")
MONSTER_DECK_ZONE_GUID = ZONE_GUIDS_DECK.MONSTER
HAPPEN_DECK_ZONE_GUID = ZONE_GUIDS_DECK.HAPPEN
TREASURE_DECK_ZONE_GUID = ZONE_GUIDS_DECK.TREASURE
LOOT_DECK_ZONE_GUID = ZONE_GUIDS_DECK.LOOT
SOUL_DECK_ZONE_GUID = ZONE_GUIDS_DECK.BONUS_SOUL
ROOM_DECK_ZONE_GUID = ZONE_GUIDS_DECK.ROOM

TABLE_BOUNDARIES = {x = 45, y = 0, z = 18}

DECK_BUILDER_GUID       = "69a80e"
SETTING_UP_NOTE_GUID    = "56a44e"
TABLE_BASE_GUID         = "f5c4fe"

ready_for_setup = false

local function topTwoCardsAreMonster(deck)
    local allCards = deck.getObjects()
    if (not Global.call("findBoolInScript", {scriptString = allCards[1].lua_script, varName = "isEvent"})) and
        (not Global.call("findBoolInScript", {scriptString = allCards[2].lua_script, varName = "isEvent"})) then
            return true
        end
    return false
end

local function setupPlayingArea()
    -- Edited by Ediforce44
    -- Init Monster Zones and Monster Buttons
    local allMonsterCards = monsterDeck.getObjects()
    while not topTwoCardsAreMonster(monsterDeck) do
        monsterDeck.shuffle()
    end

    local monsterZoneGUIDs = Global.getTable("ZONE_GUID_MONSTER")
    getObjectFromGUID(monsterZoneGUIDs.ONE).call("activateZone")
    getObjectFromGUID(monsterZoneGUIDs.TWO).call("activateZone")
    getObjectFromGUID(monsterZoneGUIDs.THREE).call("deactivateZone")
    getObjectFromGUID(monsterZoneGUIDs.FOUR).call("deactivateZone")
    getObjectFromGUID(monsterZoneGUIDs.FIVE).call("deactivateZone")
    getObjectFromGUID(monsterZoneGUIDs.SIX).call("deactivateZone")
    getObjectFromGUID(monsterZoneGUIDs.SEVEN).call("deactivateZone")
    getObjectFromGUID(MONSTER_DECK_ZONE_GUID).call("activateChooseButton")

    -- Init Shop Zones and Shop Buttons
    local shopZoneGUIDs = Global.getTable("ZONE_GUID_SHOP")
    getObjectFromGUID(shopZoneGUIDs.ONE).call("activateZone")
    getObjectFromGUID(shopZoneGUIDs.TWO).call("activateZone")
    getObjectFromGUID(shopZoneGUIDs.THREE).call("deactivateZone")
    getObjectFromGUID(shopZoneGUIDs.FOUR).call("deactivateZone")
    getObjectFromGUID(shopZoneGUIDs.FIVE).call("deactivateZone")
    getObjectFromGUID(shopZoneGUIDs.SIX).call("deactivateZone")
    getObjectFromGUID(TREASURE_DECK_ZONE_GUID).call("activateShopButton")

    -- Init Room Zones and Room Buttons
    local roomZoneGUIDs = Global.getTable("ZONE_GUID_ROOM")
    getObjectFromGUID(roomZoneGUIDs.ONE).call("activateZone")
    getObjectFromGUID(roomZoneGUIDs.TWO).call("deactivateZone")

    local bonusSoulZones = Global.getTable("ZONE_GUID_BONUSSOUL")
    if soulDeck ~= nil then
        soulDeck.takeObject({position=getObjectFromGUID(bonusSoulZones.ONE).getPosition(), flip=true})
        soulDeck.takeObject({position=getObjectFromGUID(bonusSoulZones.TWO).getPosition(), flip=true})
        soulDeck.takeObject({position=getObjectFromGUID(bonusSoulZones.THREE).getPosition(), flip=true})
    end
end

local function detectExpansions()
    local expansions = {}
    local allObjects = Global.getObjects()
    for _, obj in ipairs(allObjects) do
        local objPosition = obj.getPosition()
        if objPosition.y > TABLE_BOUNDARIES.y then
            if math.abs(objPosition.x) < TABLE_BOUNDARIES.x then
                if math.abs(objPosition.z) < TABLE_BOUNDARIES.z then
                    if obj.hasTag('EXPANSION') then
                        table.insert(expansions, obj)
                    end
                end
            end
        end
    end
    return expansions
end

local function extractDecksToDeckPositions(containerObj, expansionBox)
    local zoneGUIDs = Global.getTable('ZONE_GUID_DECK')
    for _, deck in ipairs(containerObj.getObjects()) do
        if zoneGUIDs[deck.name] ~= nil then
            local deckInZone = nil
            local zone = getObjectFromGUID(zoneGUIDs[deck.name])
            for _, obj in pairs(zone.getObjects()) do
                if obj.tag == "Deck" then
                    deckInZone = obj
                    break
                end
            end
            extractedDeck = containerObj.takeObject({guid = deck.guid, position = zone.getPosition(), smooth = false,
                rotation = Vector(180, 0, 0)})
            if deckInZone ~= nil then
                deckInZone.putObject(extractedDeck)
            end
        else
            printToAll("[fdd835][WARNING][-] Can't find the zone where the \"" + deck.name +
                " deck of this expansion belongs to: " + expansionBox.getName())
        end
    end
end

local function extractExpansion(expansionBox, language)
    local objectsInBox = expansionBox.getObjects()
    for _, obj in ipairs(objectsInBox) do
        if obj.name == language then
            local extractedObject = expansionBox.takeObject({index = obj.index,
                position = expansionBox.getPosition():sub(Vector(0,0, 4)), smooth = false})
            extractDecksToDeckPositions(extractedObject, expansionBox)
            Wait.frames(function() destroyObject(extractedObject) end, 2)
        end
    end
end

local function getPreDecksOnTable()
    local preDecksOnTable = {}
    local zoneGUIDs = Global.getTable('ZONE_GUID_DECK')
    for zoneType, zoneGUID in pairs(zoneGUIDs) do
        local zone = getObjectFromGUID(zoneGUID)
        for _, obj in pairs(zone.getObjects()) do
            if obj.tag == "Deck" then
                preDecksOnTable[zoneType] = {EMPTY = obj.getGUID()}
                break
            end
        end
    end
    return preDecksOnTable
end

-- deckTableTwo overwrites deckTableOne entries if there a any duplicates
local function mergePreDecks(deckTableOne, deckTableTwo)
    if deckTableOne == nil then
        if deckTableTwo == nil then
            return {}
        else
            return deckTableTwo
        end
    elseif deckTableTwo == nil then
        return deckTableOne
    end

    local resultingDeckTable = deckTableOne
    for deckType, guidTable in pairs(deckTableTwo) do
        local preDeckTableEntry = resultingDeckTable[deckType]
        if preDeckTableEntry == nil then
            preDeckTableEntry = {}
        end
        for cardType, GUID in pairs(guidTable) do
            preDeckTableEntry[cardType] = GUID
        end
        resultingDeckTable[deckType] = preDeckTableEntry
    end
    return resultingDeckTable
end

local function setupExpansions(gameLanguage)
    local expansions = detectExpansions()
    for _, expansion in ipairs(expansions) do
        extractExpansion(expansion, gameLanguage)
        Wait.frames(function() destroyObject(expansion) end, 2)
    end
end

local function setupOfficialContent(gameLanguage)
    if not ready_for_setup then
        local tableBase = getObjectFromGUID(TABLE_BASE_GUID)

        local preDeckGUIDs = tableBase.call("getDeckGUIDs", {language = gameLanguage})
        local preExpansionDeckGUIDs = getPreDecksOnTable()
        preDeckGUIDs = mergePreDecks(preDeckGUIDs, preExpansionDeckGUIDs)

        tableBase.call("shufflePreDecks", {preDecks = preDeckGUIDs})
        Wait.frames(
            function()
                getObjectFromGUID(DECK_BUILDER_GUID).call("buildDecks", {preDecks = preDeckGUIDs})
            end)
    end

    Wait.condition(
        function()
            checkAndShuffleDecks()
            if lootDeck ~= nil then
                lootDeck.deal(3)
            end
            setupPlayingArea()

            for _, color in pairs(getSeatedPlayers()) do
                Global.call("deactivateCharacter", {playerColor = color})
            end

            -- INSERT other setup steps

            self.editButton({
                index = 0,
                click_function = "dummy",
                label = "",
                tooltip = "",
                width = 0,
                height = 0,
                font_size = 0
            })

            local startPlayerColor = Global.getVar("startPlayerColor")

            -- !!! Order matters !!!
            Turns.type = 1
            Turns.turn_color = startPlayerColor
            Turns.enable = true

            self.destroy()
        end,
        function()
            return ready_for_setup
        end)
end

function onLoad()
    self.createButton({
    click_function = "onStart",
    label = "Start",
    tooltip = "Click here to start!",
    function_owner = self,
    position = {0, 0.11, -1},
    rotation = {0, 0, 0},
    color = {1, 1, 1},
    width = 1100,
    height = 500,
    font_size = 400
})
end

function shuffleOptions(array)

    local output = { }
    local random = math.random

    for index = 1, #array do
        local offset = index - 1
        local value = array[index]
        local randomIndex = offset*random()
        local flooredIndex = randomIndex - randomIndex%1

        if flooredIndex == offset then
            output[#output + 1] = value
        else
            output[#output + 1] = output[flooredIndex + 1]
            output[flooredIndex + 1] = value
        end
    end

    return output
end

function decksBuilt(createdDecks)
    treasureDeck = createdDecks.TREASURE
    lootDeck = createdDecks.LOOT
    monsterDeck = createdDecks.MONSTER
    roomDeck = createdDecks.ROOM
    soulDeck = createdDecks.BONUS_SOUL
    ready_for_setup = true
end

function fadeOutButton(timeToFade)
    local timeSlices = timeToFade * 30
    local sliceLength = timeToFade / timeSlices
    local startColor = self.getButtons()[START_BUTTON_INDEX].color
    local colorSub = {sliceLength * startColor[1], sliceLength * startColor[2], sliceLength * startColor[3]}
    for slice = 0, timeSlices do
        Wait.time(function ()
            local preColor = self.getButtons()[START_BUTTON_INDEX].color
            local newColor = {preColor[1] - colorSub[1], preColor[2] - colorSub[2], preColor[3] - colorSub[3]}
            self.editButton({index = START_BUTTON_INDEX - 1, color = newColor})
        end, slice * sliceLength)
    end
end

function onStart()
    if Global.call("hasGameStarted") then
        return
    end

    local startPlayerColor = Global.getVar("startPlayerColor")
    if startPlayerColor == "None" then
        for _, color in pairs(getSeatedPlayers()) do
            if (color == "Red") or (color == "Blue") or (color == "Green") or (color == "Yellow") then
                startPlayerColor = color
                break
            end
        end

        if startPlayerColor == "None" then
            printToAll("[fdd835][WARNING][-] At least 1 player must select a player color: Red, Blue, Green or Yellow.")
            return
        end
        Global.call("setNewStartPlayer", {playerColor = startPlayerColor})
    end

    local isAllReady = isAllPlayersSelectCharacter()
    if isAllReady == false or isAllReady == nil then
        printToAll("[fdd835][WARNING][-] Each player must take a character before start.")
        return
    end

    if getObjectFromGUID(SETTING_UP_NOTE_GUID) ~= nil then
        settingUpNote = getObjectFromGUID(SETTING_UP_NOTE_GUID)
        destroyObject(settingUpNote)
    end

    local gameLanguage = Global.getVar("gameLanguage")
    --TODO: Implement better version for the expansions
    --setupExpansions(gameLanguage)

    --Wait.time(
    --    function()
            setupOfficialContent(gameLanguage)
    --    end, 2)
end

function isAllPlayersSelectCharacter()
    local characterPlacerObj = getObjectFromGUID(CHARACTER_PLACER_GUID)
    local playersSpawnedCharacterObj = characterPlacerObj.getTable("playersSpawnedCharacterObj")
    local selectedCharacterCount = 0
    for _, pObjs in pairs(playersSpawnedCharacterObj) do
        if #pObjs > 0 then
            selectedCharacterCount = selectedCharacterCount + 1
        end
    end

    return selectedCharacterCount == getPlayersCount()
end

function getPlayersCount()
  local counter = 0
  for _, player in pairs(Player.getPlayers()) do
    for _, color in pairs(PLAYER_COLORS) do
      if player.color == color then
        counter = counter + 1
      end
    end
  end
  return counter
end

function checkAndShuffleDecks()
    local decksToShuffle = {}
    if monsterDeck ~= nil then
      table.insert(decksToShuffle, monsterDeck)
    else
      printToAll("[fdd835][WARNING][-] Can't find the Monster Deck!!!")
    end
    if soulDeck ~= nil then
      table.insert(decksToShuffle, soulDeck)
    else
      printToAll("[fdd835][WARNING][-] Can't find the Bonus Soul Deck!!!")
    end
    if treasureDeck ~= nil then
      table.insert(decksToShuffle, treasureDeck)
    else
      printToAll("[fdd835][WARNING][-] Can't find the Treasure Deck!!!")
    end
    if lootDeck ~= nil then
      table.insert(decksToShuffle, lootDeck)
    else
      printToAll("[fdd835][WARNING][-] Can't find the Loot Deck!!!")
    end
    if roomDeck ~= nil then
      table.insert(decksToShuffle, roomDeck)
    else
      printToAll("[fdd835][WARNING][-] Can't find the Room Deck!!!")
    end

    for i = 1, #decksToShuffle, 1 do
        local obj = decksToShuffle[i]
        if obj ~= nil then
            obj.shuffle()
        end
    end
end

function dummy()
end