
local ACTIVE_BUTTON_INDEX = 1

local SELECTED_GAME_MODE = nil

local BUTTONS_LOCKED = false

local ACTIVE_NO_GOES = {}

GAMEMODE_BUTTON_INDICES = {
    NORMAL  = nil,
    DRAFT   = nil
}

TABLE_BASE_GUID = "f5c4fe"

local function changeGameMode(newGameMode)
    for gameMode, index in pairs(GAMEMODE_BUTTON_INDICES) do
        if GAME_MODE[gameMode] ~= newGameMode then
            self.editButton({index=index-1, label=""})
        end
    end

    local modeButtonIndex
    if newGameMode == GAME_MODE.NORMAL then
        modeButtonIndex = GAMEMODE_BUTTON_INDICES.NORMAL
        broadcastToAll("New Game Mode selected: " .. Global.getTable("PRINT_COLOR_SPECIAL").MONSTER_LIGHT.. "Normal")
        SELECTED_GAME_MODE = GAME_MODE.NORMAL
    elseif newGameMode == GAME_MODE.DRAFT then
        modeButtonIndex = GAMEMODE_BUTTON_INDICES.DRAFT
        broadcastToAll("New Game Mode selected: " .. Global.getTable("PRINT_COLOR_SPECIAL").MONSTER_LIGHT .. "Draft")
        SELECTED_GAME_MODE = GAME_MODE.DRAFT
    end

    self.editButton({index=modeButtonIndex-1, label="✓", font_color={0, 0, 0}, font_size=250})
end

function gmNormal()
    if Global.call("hasGameStarted") or BUTTONS_LOCKED then
        return
    end
    if (self.getButtons()[GAMEMODE_BUTTON_INDICES.NORMAL].label == "") then
        changeGameMode(GAME_MODE.NORMAL)
    end
end

function gmDraft()
    if Global.call("hasGameStarted") or BUTTONS_LOCKED then
        return
    end
    if (self.getButtons()[GAMEMODE_BUTTON_INDICES.DRAFT].label == "") then
        changeGameMode(GAME_MODE.DRAFT)
    end
end

function prepareForManualDeckBuilding()
    if Global.call("hasGameStarted") or BUTTONS_LOCKED then
        return
    end
    if isDeckBuilderON() then
        switchBuilderMode()
    end
    local gameLanguage = Global.getVar("gameLanguage")
    local tableBase = getObjectFromGUID(TABLE_BASE_GUID)
    local preDeckGUIDs = tableBase.call("getDeckGUIDs", {language = gameLanguage})
    tableBase.call("shufflePreDecks", {preDecks = preDeckGUIDs})

    buildDecks({preDecks = preDeckGUIDs})
    BUTTONS_LOCKED = true
end

function onLoad(saved_data)
    self.createButton({
      click_function = "switchBuilderMode",
      function_owner = self,
      label          = "",
      position       = {5, 1, -0.29},
      width          = 300,
      height         = 300,
      color          = {1, 1, 1},
      tooltip        = ""
    })
    self.createButton({
      click_function = "prepareForManualDeckBuilding",
      function_owner = self,
      label          = "Manual",
      font_size      = 250,
      position       = {6, 1, 0.58},
      width          = 1000,
      height         = 300,
      color          = {1, 1, 1},
      tooltip        = "If you press this button there is no way back!\nAll playable cards will be placed on the table and you can build your own decks."
    })

    self.createButton({
      click_function = "gmNormal",
      function_owner = self,
      label          = "",
      position       = {-6.5, 1, -0.29},
      width          = 300,
      height         = 300,
      color          = {1, 1, 1},
      tooltip        = "Here you can change the game mode. The game mode will influence the Deck-Builder."
    })
    GAMEMODE_BUTTON_INDICES.NORMAL = 3

    self.createButton({
      click_function = "gmDraft",
      function_owner = self,
      label          = "",
      position       = {-6.5, 1, 0.58},
      width          = 300,
      height         = 300,
      color          = {1, 1, 1},
      tooltip        = "Here you can change the game mode. The game mode will influence the Deck-Builder."
    })
    GAMEMODE_BUTTON_INDICES.DRAFT = 4

    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        if loaded_data[1] == true then
            switchBuilderMode()
        end
        if loaded_data[2] ~= nil then
            changeGameMode(loaded_data[2])
        else
            changeGameMode(GAME_MODE.NORMAL)
        end
    end
end

function onSave()
    return JSON.encode({isDeckBuilderON(), SELECTED_GAME_MODE})
end

function isDeckBuilderON()
    local activeButton = self.getButtons()[ACTIVE_BUTTON_INDEX]
    return (activeButton.label ~= "")
end

function switchBuilderMode()
    if Global.call("hasGameStarted") or BUTTONS_LOCKED then
        return
    end
    local newLabel = ""
    local newTooltip = ""
    if not isDeckBuilderON() then
        newLabel = "✓"
        newTooltip = "ACTIVE:\nIf you start the game the Deck-Builder will build decks dependent on the selected game mode."
        broadcastToAll(Global.getTable("PRINT_COLOR_SPECIAL").WARNING .. "Activated Deck-Builder")
    else
        newTooltip = "DEACTIVE:\nThe game will start with all playable cards."
        broadcastToAll(Global.getTable("PRINT_COLOR_SPECIAL").WARNING .. "Deactivated Deck-Builder")
    end
    self.editButton({index=ACTIVE_BUTTON_INDEX-1, label=newLabel, font_color={0, 0, 0}, font_size=250, tooltip = newTooltip})
end

------------------------------------------------------------------------------------------------------------------------
----------------------------------------------      NO GOES       ------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

local function isInTable(table, contentToCheck)
    for _, entry in pairs(table) do
        if entry == contentToCheck then
            return true
        end
    end
    return false
end

NO_GO_TYPES = {
    ONLY_MULTIPLAYER = "ONLY_MULTIPLAYER",
    ALT_ART = "ALT_ART",
    PROMO = "PROMO"
}

-- objTable needs the following fields:       name,  lua_script,  tags
NO_GO_FILTERS = {
    ONLY_MULTIPLAYER = function(objTable) return isInTable(objTable.tags, NO_GO_TYPES.ONLY_MULTIPLAYER) end,
    Unkown = function(_) Global.call("printWarning", {text = "Deck Builder: No idea what NO-GO you try to check!?"}) end
}

------------------------------------------------------------------------------------------------------------------------
--------------------------------------------      Deck Builder        --------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

GAME_MODE = {
    NORMAL  = 1,
    DRAFT   = 2
}

local DUMMY_CARDS = {
    TREASURE = {"20478b", "de6fa6"},
    LOOT = {"fc7f84", "d8bf8b"},
    MONSTER = {"6f7d81", "ad45a5"}
}

local DECK_TREASURE = {
    {
        T_ACTIVE  = 40,
        T_PASSIVE = 44,
        T_PAID    = 10,
        T_ONE_USE = 5,
        T_SOUL    = 1
    },
    {
        T_ACTIVE  = 40,
        T_PASSIVE = 44,
        T_PAID    = 10,
        T_ONE_USE = 5,
        T_SOUL    = 1
    }
}

local DECK_LOOT = {
    {
        L_TAROT_MISC    = 23,
        L_TRINKET       = 11,
        L_PILL          = 3,
        L_RUNE          = 3,
        L_BUTTER_BEAN   = 5,
        L_BOMB          = 6,
        L_BATTERY       = 6,
        L_DICE_SHARD    = 3,
        L_SOUL_HEART    = 2,
        L_LOST_SOUL     = 1,
        L_NICKEL        = 6,
        L_FOUR_CENT     = 12,
        L_THREE_CENT    = 11,
        L_TWO_CENT      = 6,
        L_ONE_CENT      = 2
    },
    {
        L_TAROT_MISC    = 22,
        L_TRINKET       = 10,
        L_PILL          = 2,
        L_RUNE          = 3,
        L_BUTTER_BEAN   = 5,
        L_BOMB          = 5,
        L_BATTERY       = 5,
        L_DICE_SHARD    = 3,
        L_SOUL_HEART    = 2,
        L_LOST_SOUL     = 1,
        L_NICKEL        = 5,
        L_FOUR_CENT     = 10,
        L_THREE_CENT    = 10,
        L_TWO_CENT      = 5,
        L_ONE_CENT      = 2
    }
}

local DECK_MONSTER = {
    {
        M_BOSS        = 30,
        M_EPIC        = 1,
        M_BASIC       = 30,
        M_CURSED      = 9,
        M_HOLY_CHARMED= 9,
        M_GOOD        = 8,
        M_BAD         = 8,
        M_CURSE       = 5
    },
    {
        M_BOSS        = 30,
        M_EPIC        = 1,
        M_BASIC       = 30,
        M_CURSED      = 9,
        M_HOLY_CHARMED= 9,
        M_GOOD        = 8,
        M_BAD         = 8,
        M_CURSE       = 5
    }
}

local DECK_ROOM = {
    R_ALL   = 200
}

local DECK_BONUS_SOUL = {
    BS_ALL  = 100
}

local DECK_MONSTER_SEP = {
    MS_ALL  = 100
}

local B_TOTAL_DECK_COUNT = 6
local B_waitingDecks = {}

local function getDeckFromTable(name)
    for _, obj in ipairs(getObjectsWithTag("Deck")) do
        if obj.getName() == name then
            return obj
        end
    end
    return nil
end

local function mergeDecks(decks, startDeck)
    local buildDeck = nil
    if (startDeck ~= nil) and (startDeck.tag == "Deck") then
        buildDeck = startDeck
    end

    local tempCards = {}
    for _, nextDeck in pairs(decks) do
        if buildDeck == nil then
            if nextDeck.tag == "Deck" then
                buildDeck = nextDeck
            else
                table.insert(tempCards, nextDeck)
            end
        else
            buildDeck.putObject(nextDeck)
        end
    end

    if #tempCards > 0 then
        if buildDeck == nil then
            Global.call("printWarning", {text = "The Deck-Builder can't build a deck if all parts of the deck are single cards."
                .. "At least one part of the deck has to be a deck already."})
        else
            for _, card in pairs(tempCards) do
                buildDeck.putObject(card)
            end
        end
    end

    return buildDeck
end

local function checkForNoGoes(objTable)
    for _, noGoType in pairs(ACTIVE_NO_GOES) do
        if NO_GO_FILTERS[noGoType](objTable) then
            return false
        end
    end
    return true
end

local function takeCardsFromDeck(deck, cardGUIDs, takenCardsTable)
    for _, guid in pairs(cardGUIDs) do
        local card = deck.takeObject({
            guid = guid
        })
        table.insert(takenCardsTable, card)
    end
    return takenCardsTable
end

local function buildDeckSpeed(preDeckGUIDs, tagTable)
    local selectedDecks = {}
    local leftoverDecks = {}
    if isDeckBuilderON() then
        tagTable["EMPTY"] = 500
        for type, amountToTake in pairs(tagTable) do
            if (preDeckGUIDs[type] ~= nil) and (amountToTake > 0) then
                local preDeck = getObjectFromGUID(preDeckGUIDs[type])
                if preDeck.tag == "Deck" then
                    -- For the edge case that only one card should be choosen
                    if amountToTake == 1 then
                        table.insert(selectedDecks, preDeck.takeObject())
                        table.insert(leftoverDecks, preDeck)
                    elseif amountToTake == (preDeck.getQuantity() - 1) then
                        local cardLeft = preDeck.takeObject()
                        table.insert(selectedDecks, preDeck)
                        table.insert(leftoverDecks, cardLeft)
                    else
                        local splitDecks = preDeck.cut(preDeck.getQuantity() - amountToTake)
                        if splitDecks ~= nil then
                            table.insert(leftoverDecks, splitDecks[2])
                        end
                        table.insert(selectedDecks, preDeck)
                    end
                else
                    table.insert(selectedDecks, preDeck)
                end
            end
        end
    else
        for _, guid in pairs(preDeckGUIDs) do
            table.insert(selectedDecks, getObjectFromGUID(guid))
        end
    end

    return {mergeDecks(selectedDecks), mergeDecks(leftoverDecks)}
end

local function buildDeckFilter(preDeckGUIDs, tagTable)
    local selectedDecks = {}
    local leftoverDecks = {}
    if isDeckBuilderON() then
        tagTable["EMPTY"] = 500
        for type, amountToTake in pairs(tagTable) do
            if (preDeckGUIDs[type] ~= nil) and (amountToTake > 0) then
                local preDeck = getObjectFromGUID(preDeckGUIDs[type])
                if preDeck.tag == "Deck" then
                    -- For the edge case that only one card should be choosen
                    if amountToTake == 1 then
                        for _, objTable in pairs(preDeck.getObjects())do
                            if checkForNoGoes(objTable) then
                                table.insert(selectedDecks, preDeck.takeObject({guid = objTable.guid}))
                                break
                            end
                        end
                        table.insert(leftoverDecks, preDeck)
                    else
                        local cardsToDestroy = {}
                        local goodCards = 0
                        local badCards = 0
                        for _, objTable in pairs(preDeck.getObjects()) do
                            if checkForNoGoes(objTable) then
                                goodCards = goodCards + 1
                                if goodCards == amountToTake then
                                    break
                                end
                            else
                                badCards = badCards + 1
                                table.insert(cardsToDestroy, objTable.guid)
                            end
                        end
                        if (goodCards + badCards) < preDeck.getQuantity() then
                            if (goodCards + badCards) == (preDeck.getQuantity() - 1) then
                                leftoverDecks = takeCardsFromDeck(preDeck, cardsToDestroy, leftoverDecks)
                                local cardLeft = preDeck.takeObject({top = false})
                                table.insert(selectedDecks, preDeck)
                                table.insert(leftoverDecks, cardLeft)
                            else
                                local splitDecks = preDeck.cut(preDeck.getQuantity() - (goodCards + badCards))
                                if splitDecks ~= nil then
                                    table.insert(leftoverDecks, splitDecks[2])
                                end
                                leftoverDecks = takeCardsFromDeck(preDeck, cardsToDestroy, leftoverDecks)
                                table.insert(selectedDecks, preDeck)
                            end
                        else
                            if goodCards > 0 then
                                if goodCards == 1 then
                                    for _, objTable in pairs(preDeck.getObjects()) do
                                        if checkForNoGoes(objTable) then
                                            table.insert(selectedDecks, preDeck.takeObject({guid = objTable.guid}))
                                            break
                                        end
                                    end
                                    table.insert(leftoverDecks, preDeck)
                                else
                                    leftoverDecks = takeCardsFromDeck(preDeck, cardsToDestroy, leftoverDecks)
                                    table.insert(selectedDecks, preDeck)
                                end
                            end
                        end
                    end
                else
                    if checkForNoGoes({name = preDeck.getName(), lua_script = preDeck.getLuaScript()
                        , tags = preDeck.getTags()}) then
                        table.insert(selectedDecks, preDeck)
                    end
                end
            end
        end
    else
        for _, guid in pairs(preDeckGUIDs) do
            table.insert(selectedDecks, getObjectFromGUID(guid))
        end
    end

    return {mergeDecks(selectedDecks), mergeDecks(leftoverDecks)}
end

local function buildDeck(preDeckGUIDs, tagTable)
    return buildDeckSpeed(preDeckGUIDs, tagTable)
    --return buildDeckFilter(preDeckGUIDs, tagTable)
end

local function deckBuildBarrier(deckType, deck)
    B_waitingDecks[deckType] = deck
    local waitCount = 0
    for _, _ in pairs(B_waitingDecks) do
        waitCount = waitCount + 1
    end
    if waitCount >= B_TOTAL_DECK_COUNT then
        getObjectFromGUID("195d79").call("decksBuilt", B_waitingDecks)
        B_waitingDecks = {}
    end
end

local function placeLeftoverDeck(deck, position, name)
    if deck == nil then
        return
    end
    deck.setPositionSmooth(position)
    deck.setRotationSmooth({0, 270, 180}, false)
    deck.interactable = true,
    deck.setName(name)
end

local function buildTreasureDeck(mode, preTreasureDeckGUIDs)
    local treasureDecks = buildDeck(preTreasureDeckGUIDs, DECK_TREASURE[mode])
    local treasureDeck = treasureDecks[1]
    local leftOverTreasureDeck = treasureDecks[2]

    if treasureDeck == nil then
        Global.call("printWarning", {text = "Can't build treasure deck. [C30000][Please restart this map.][-]"})
        return
    end

    treasureDeck.setPositionSmooth(Global.getTable("DECK_POSITION").TREASURE, false)
    treasureDeck.setRotationSmooth({180, 0, 0}, false)
    treasureDeck.interactable = true
    treasureDeck.setName("Treasure Deck")

    placeLeftoverDeck(leftOverTreasureDeck, Global.getTable("DECK_POSITION").LO_TREASURE, "Leftover Treasure Cards")

    Wait.condition(function() deckBuildBarrier("TREASURE", treasureDeck) end, function() return treasureDeck.resting end)
end

local function buildLootDeck(mode, preLootDeckGUIDs)
    local lootDecks = buildDeck(preLootDeckGUIDs, DECK_LOOT[mode])
    local lootDeck = lootDecks[1]
    local leftOverLootDeck = lootDecks[2]

    if lootDeck == nil then
        Global.call("printWarning", {text = "Can't build loot deck. [C30000][Please restart this map.][-]"})
        return
    end

    lootDeck.setPositionSmooth(Global.getTable("DECK_POSITION").LOOT, false)
    lootDeck.setRotationSmooth({180, 0, 0}, false)
    lootDeck.interactable = true
    lootDeck.setName("Loot Deck")

    placeLeftoverDeck(leftOverLootDeck, Global.getTable("DECK_POSITION").LO_LOOT, "Leftover Loot Cards")

    Wait.condition(function() deckBuildBarrier("LOOT", lootDeck) end, function() return lootDeck.resting end)
end

local function buildMonsterDeck(mode, preMonsterDeckGUIDs)
    local monsterDecks = buildDeck(preMonsterDeckGUIDs, DECK_MONSTER[mode])
    local monsterDeck = monsterDecks[1]
    local leftOverMonsterDeck = monsterDecks[2]

    if monsterDeck == nil then
        Global.call("printWarning", {text = "Can't build monster deck. [C30000][Please restart this map.][-]"})
        return
    end

    monsterDeck.setPositionSmooth(Global.getTable("DECK_POSITION").MONSTER, false)
    monsterDeck.setRotationSmooth({180, 0, 0}, false)
    monsterDeck.interactable = true
    monsterDeck.setName("Monster Deck")

    placeLeftoverDeck(leftOverMonsterDeck, Global.getTable("DECK_POSITION").LO_MONSTER, "Leftover Monster Cards")

    Wait.condition(function() deckBuildBarrier("MONSTER", monsterDeck) end, function() return monsterDeck.resting end)
end

local function buildRoomDeck(mode, preRoomDeckGUIDs)
    local roomDeck = buildDeck(preRoomDeckGUIDs, DECK_ROOM)[1]

    if roomDeck == nil then
        Global.call("printWarning", {text = "Can't build room deck. [C30000][Please restart this map.][-]"})
        return
    end

    roomDeck.setPositionSmooth(Global.getTable("DECK_POSITION").ROOM, false)
    roomDeck.setRotationSmooth({180, 0, 0}, false)
    roomDeck.interactable = true
    roomDeck.setName("Room Deck")

    Wait.condition(function() deckBuildBarrier("ROOM", roomDeck) end, function() return roomDeck.resting end)
end

local function buildBonusSoulDeck(mode, preBonusSoulDeckGUIDs)
    local bonusSoulDeck = buildDeck(preBonusSoulDeckGUIDs, DECK_BONUS_SOUL)[1]

    if bonusSoulDeck == nil then
        Global.call("printWarning", {text = "Can't build bonus soul deck. [C30000][Please restart this map.][-]"})
        return
    end

    bonusSoulDeck.interactable = true
    bonusSoulDeck.setPositionSmooth(Global.getTable("DECK_POSITION").BONUS_SOUL, false)
    bonusSoulDeck.setRotationSmooth({0, 270, 180}, false)
    bonusSoulDeck.setName("Bonus-Soul Deck")

    Wait.condition(function() deckBuildBarrier("BONUS_SOUL", bonusSoulDeck) end
        , function() return bonusSoulDeck.resting end)
end

local function buildMonsterSepDeck(mode, preMonsterSepDeckGUIDs)
    local monsterSepDeck = buildDeck(preMonsterSepDeckGUIDs, DECK_MONSTER_SEP)[1]

    if monsterSepDeck == nil then
        local lastCard = nil
        for _, guid in pairs(preMonsterSepDeckGUIDs) do
            local card = getObjectFromGUID(guid)
            card.interactable = true
            card.setPositionSmooth(Global.getTable("DECK_POSITION").MONSTER_SEP, false)
            card.setRotationSmooth({0, 270, 0}, false)
            lastCard = card
        end
        Wait.condition(function() deckBuildBarrier("MONSTER_SEP", lastCard) end
            , function() return lastCard.isSmoothMoving() end)
    else
        monsterSepDeck.interactable = true
        monsterSepDeck.setPositionSmooth(Global.getTable("DECK_POSITION").MONSTER_SEP, false)
        monsterSepDeck.setRotationSmooth({0, 270, 0}, false)
        monsterSepDeck.setName("Seperate Monster Deck")
        Wait.condition(function() deckBuildBarrier("MONSTER_SEP", monsterSepDeck) end
            , function() return monsterSepDeck.resting end)
    end
end

function buildDecks(params)
    local buildingMode = SELECTED_GAME_MODE
    if params.preDecks == nil then
        Global.call("printWarning", {text = "Wrong parameters in Deck Builder function 'buildDecks()'."})
    end
    buildTreasureDeck(buildingMode, params.preDecks.TREASURE)
    buildLootDeck(buildingMode, params.preDecks.LOOT)
    buildMonsterDeck(buildingMode, params.preDecks.MONSTER)

    buildRoomDeck(buildingMode, params.preDecks.ROOM)
    buildBonusSoulDeck(buildingMode, params.preDecks.BONUS_SOUL)
    buildMonsterSepDeck(buildingMode, params.preDecks.MONSTER_SEP)
end