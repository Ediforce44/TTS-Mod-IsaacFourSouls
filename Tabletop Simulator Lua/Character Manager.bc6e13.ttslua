CHARACTER_PLACER_GUID = "d2c68a"

inputCharCount = 2
characterPull = {}
waitForSelectCharacters = {
  Red = {},
  Blue = {},
  Green = {},
  Yellow = {}
}

playersSpawnedCharacterObj = {
  Red = {},
  Blue = {},
  Green = {},
  Yellow = {}
}

originalPositionTable = {}

math.randomseed(os.time())

function onLoad(saved_data)
  loadCharPacksFromWorld()
  initButtons()
  if saved_data ~= "" then
      local loaded_data = JSON.decode(saved_data)
      if loaded_data[1] then
          originalPositionTable = loaded_data[1]
      end
  end
end

function onSave()
    return JSON.encode({originalPositionTable})
end

function loadCharPacksFromWorld()
  characterPull = {}
  local allObj = getAllObjects()
  for i, obj in pairs(allObj) do
    if (obj.getDescription() == "character-pack") and (obj.getPosition().y > 0) and not isCharUsedInWaitPull(obj.guid) then
      table.insert(characterPull, obj)
    end
  end
end

function isCharUsedInWaitPull(charGuid)
  for _, player in pairs(waitForSelectCharacters) do
    for _, char in pairs(player) do
      if charGuid == char.guid then
        return true
      end
    end
  end
  return false
end

function cleanupSpawnedObj(params)
    if params.playerColor == nil then
        Global.call("printWarning", {text = "Wrong parameters in character manager function 'cleanupSpawnedObj()'."})
    end
    local playerCharacterObj = playersSpawnedCharacterObj[params.playerColor]
    if playerCharacterObj ~= nil then
        for _, guid in pairs(playerCharacterObj) do
            local obj = getObjectFromGUID(guid)
            if obj ~= nil then
                obj.destruct()
            end
        end
        playersSpawnedCharacterObj[params.playerColor] = {}
        local playerZone = getObjectFromGUID(Global.getTable("ZONE_GUID_PLAYER")[params.playerColor])
        if playerZone then
            playerZone.setVar("active", false)
        end
    end
end

function dealCharPackToPlayer(params)
    if (params.charPack == nil) or (params.playerColor == nil) then
        Global.call("printWarning", {text = "Wrong parameters in character manager function 'dealCharPackToPlayer()'."})
        return
    end

    local charPack = params.charPack

    if charPack.resting then
        --Resting needed to don't set the position while pack is in the air (e.g. Returning and selecting immediately again)
        originalPositionTable[charPack.getGUID()] = charPack.getPosition()
    end

    --Just for the eden chars under the table
    charPack.interactable = true

    for index, waitingPack in ipairs(characterPull) do
        if waitingPack.getGUID() == charPack.getGUID() then
            table.remove(characterPull, index)
        end
    end
    table.insert(waitForSelectCharacters[params.playerColor], charPack)

    makeCharPackToSelect(charPack, params.playerColor)
    Global.call("placeObjectsInPlayerZone", {playerColor = params.playerColor, objects = {charPack}, index = 8, replacing = false})
end

function initButtons()
  self.createButton({
    click_function = "nope",
    function_owner = self,
    label          = "Count:",
    position       = {-1.4, 1, 0},
    width          = 0,
    height         = 0,
    font_size      = 300,
    font_color     = {1, 1, 1}
  })
  self.createInput({
    input_function = "updateCharactersCount",
    function_owner = self,
    label          = "test",
    alignment      = 3,
    position       = {0, 1, 0},
    width          = 300,
    height         = 340,
    font_size      = 300,
    value          = inputCharCount,
    validation     = 2,
    tab            = 1
  })
  self.createButton({
    click_function = "randomizeToAll",
    function_owner = self,
    label          = "Randomize to [e57373]All",
    position       = {3.1, 1, 0},
    width          = 2000,
    height         = 350,
    font_size      = 230
  })
  self.createButton({
    click_function = "randomizeToMe",
    function_owner = self,
    label          = "Randomize to [7986cb]Me",
    position       = {7.4, 1, 0},
    width          = 2000,
    height         = 350,
    font_size      = 230
  })
end

function updateCharactersCount(obj, _, value)
  local newValue = nil
  if value ~= "" then
      if tonumber(value) > 7 then
          print("Invalid input value. Set to max: 7")
          newValue = 7
      elseif tonumber(value) <= 0 then
          print("Invalid input value. Set to min: 1")
          newValue = 1
      else
          newValue = value
      end
      obj.editInput({index=0, value=newValue})
      inputCharCount = newValue
  end
end

local function returnAllCharPacksFromPlayer(playerColor)
    for _ = 1,  #waitForSelectCharacters[playerColor] do
        returnCharPack(waitForSelectCharacters[playerColor][1], playerColor)
    end
end

function returnAllCharPacks()
    for color, _ in pairs(waitForSelectCharacters) do
        returnAllCharPacksFromPlayer(color)
    end
end

function randomizeToAll(_, playerClickerColor)
  loadCharPacksFromWorld()
  if #characterPull < 6 then
    Global.call("printWarningTP", {text = "Too few characters (min: 6). Maybe you forget  press \"Place characters\" button?", color =  playerClickerColor})
    return
  end

  playerList = Player.getPlayers()
  for _, player in pairs(playerList) do
      for zoneColor, zoneGuid in pairs(Global.getTable("ZONE_GUID_PLAYER")) do
          local zone = getObjectFromGUID(zoneGuid)
          if zone and (zone.getVar("owner_color") == player.color) then
              randomizeToPlayer(zoneColor)
          end
      end
  end
end

function randomizeToMe(_, playerClickerColor)
  loadCharPacksFromWorld()
  if #characterPull < 2 then
    Global.call("printWarningTP", {text = "Too few characters (min: 2). Maybe you forget  press \"Place characters\" button?", color =  playerClickerColor})
    return
  end
  for zoneColor, zoneGuid in pairs(Global.getTable("ZONE_GUID_PLAYER")) do
      local zone = getObjectFromGUID(zoneGuid)
      if zone and (zone.getVar("owner_color") == playerClickerColor) then
          randomizeToPlayer(zoneColor)
      end
  end
end

function randomizeToPlayer(playerColor)
  if waitForSelectCharacters[playerColor] == nil then
    Global.call("printWarningTP", {text = "" .. playerColor .. " is invalid color. " .. playerColor .. " must change color to one of valid: [DA1917]Red[-], [1E87FF]Blue[-], [E6E42B]Yellow[-], [30B22A]Green[-]", color =  playerColor})
    return
  end

  if #waitForSelectCharacters[playerColor] ~= 0 then
    printToAll("Reshuffle Characters")
    returnAllCharPacksFromPlayer(playerColor)
  end

  cleanupSpawnedObj({playerColor = playerColor})

  for i = 1, inputCharCount do
      local randomCharPackIndex = math.random(#characterPull)
      local randomCharPack = characterPull[randomCharPackIndex]
      dealCharPackToPlayer({charPack = randomCharPack, playerColor = playerColor})
  end
end

function makeCharPackToSelect(obj, playerColor)
  obj.clearButtons()
  obj.interactable = false

  obj.createButton({
    click_function = "selectCharacter",
    function_owner = self,
    label = "Select",
    position = {0, 0.3, 1.7},
    width = 760,
    height = 260,
    font_size = 180,
    font_color = {1, 1, 1},
    color = {102/225, 187/255, 106/255}
  })
  obj.createButton({
    click_function = "returnCharPack",
    function_owner = self,
    label = "Return",
    position = {0, 0.3, -1.7},
    width = 480,
    height = 200,
    font_size = 100,
    font_color = {1, 1, 1},
    color = {239/225, 83/255, 80/255}
  })
end

function selectCharacter(obj, playerColor)
  -- removeCharacterFromSelecting(obj.guid, playerColor)
  -- getObjectFromGUID(CHARACTER_PLACER_GUID).call("setCharacterPackScriptByCall", {obj=obj})
  obj.call("selectCharacterByCall", {obj=obj, playerColor=playerColor})
  -- obj.setPositionSmooth(originalPos, false)
end

function returnCharPack(obj, playerColor)
  removeCharPackFromSelecting(obj.guid, playerColor)
  -- getObjectFromGUID(CHARACTER_PLACER_GUID).call("setCharacterPackScriptByCall", {obj=obj})
  obj.call("initButtons")
  obj.setPositionSmooth(originalPositionTable[obj.guid], false)
  obj.setRotation({0, 180, 0})
end

function removeCharPackFromSelecting(charGuid, playerColor)
  if not waitForSelectCharacters[playerColor] then
    printToColor("[ef5350][ERROR][-] You do not have characters for select", playerColor, stringColorToRGB("Red"))
    return
  end

  for i, char in pairs(waitForSelectCharacters[playerColor]) do
    if char.guid == charGuid then
      table.insert(characterPull, char)
      table.remove(waitForSelectCharacters[playerColor], i)
    end
  end
end

function onAllCharsDeleted()
  characterPull = {}
  waitForSelectCharacters = {
    Red = {},
    Blue = {},
    Green = {},
    Yellow = {}
  }
end